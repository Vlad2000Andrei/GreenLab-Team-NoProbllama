source("load-run-joules.r")
source("load-run-joules.r")
data = load_data(path_all_joules, output_dir)
View(data)
srouce("check-normality.r") # get the normality check info
source("check-normality.r") # get the normality check info
source("check-normality.r") # get the normality check info
normality = check_normality(path_all_joules, output_dir)
source("check-normality.r") # get the normality check info
data = load_data(path_all_joules, output_dir)
normality = check_normality(path_all_joules, output_dir)
write.csv(result, file=paste(output_dir, "normality_shapiro.csv", sep=path_separator))
source("load-run-joules.r")  # import the functions from load-run-joules.r
source("check-normality.r") # get the normality check info
path_all_joules = 'C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis/Data Files/Run Joules'
output_dir      = 'C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis'
path_separator  = "/"
data = load_data(path_all_joules, output_dir)
normality = check_normality(path_all_joules, output_dir)
source("load-run-joules.r")  # import the functions from load-run-joules.r
source("check-normality.r") # get the normality check info
path_all_joules = 'C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis/Data Files/Run Joules'
output_dir      = 'C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis'
path_separator  = "/"
data = load_data(path_all_joules, output_dir)
normality = check_normality(path_all_joules, output_dir)
source("check-normality.r") # get the normality check info
normality = check_normality(path_all_joules, output_dir)
## RQ1 ##
human_data = get_bench_data(data, source="human")
View(human_data)
## RQ1 ##
human_data = get_bench_data(data, source="human")
llama_data = get_bench_data(data, source="llama")
View(llama_data)
## RQ1 ##
human_data = get_bench_data(data, source="human")$data
llama_data = get_bench_data(data, source="llama")$data
View(human_data)
llama_data = get_bench_data(data, source="llama")$data[2]
llama_data = get_bench_data(data, source="llama")$data[[2]]
llama_data = get_bench_data(data, source="llama")$data[[1]]
llama_data = get_bench_data(data, source="llama")$data
## RQ1 ##
human_data = get_bench_data(data, source="human")$data
## RQ1 ##
human_data = get_bench_data(data, source="human")$data$value
## RQ1 ##
human_data = get_bench_data(data, source="human")$data
View(data)
View(human_data)
## RQ1 ##
human_data = get_bench_data(data, source="human")
llama_data = get_bench_data(data, source="llama")
llama_data = get_bench_data(data, source="llama", efficient = "FALSE")
## RQ2 ##
llama_default = get_bench_data(data, source="llama", efficient = "FALSE")
llama_eff = get_bench_data(data, source="llama", efficient = "TRUE")
View(llama_default)
View(llama_eff)
View(llama_data)
llama_anova = subset(llama_default, c(algo, temp, lang))
llama_anova = subset(llama_default, select = c(algo, temp, lang))
View(llama_anova)
mean(llama_default$data)
check_normality = function(path_all_joules, output_dir, path_separator = '/', alpha=0.05) {
benchmarks = list.dirs(path_all_joules)[-1] # Exclude the first element of the list because that is the path_all_joules parent dir
result = data.frame(prompt = character(), pvalue = numeric(), signif=character(), normal=character())
for (dir in benchmarks) {
files = list.files(dir)
benchmark_name = tail(strsplit(dir, path_separator)[[1]], 1)
for (file in files) {
path_file = paste(c(dir, file), collapse=path_separator)
run_data = read.csv(path_file)
run_data = as.numeric(as.vector(run_data[1,])[-1]) #the other script writes it all weird so we need to transpose it weirdly
options("scipen"=100, "digits"=20)
pval = shapiro.test(run_data)$p.value
significant = pval < alpha
normal = ""
if (significant) {
normal = "Not Normal"
}
else {
normal = "Unknown"
}
new_row = data.frame(bench=file, pvalue=pval, signif=significant, normal=normal)
result = rbind(result, new_row)
}
}
colnames(result) = c("Prompt File", "Shapiro p-Value", paste("Smaller than Alpha=",alpha), "Normal")
write.csv(result, file=paste(output_dir, "normality_shapiro.csv", sep=path_separator))
return(result)
}
source("load-run-joules.r")  # import the functions from load-run-joules.r
source("check-normality.r") # get the normality check info
## RQ3 ##
llama_default = get_bench_data(data, source="llama", efficient = "FALSE")
llama_anova = subset(llama_default, select = c(algo, temp, lang))
## RQ3 ##
llama_default = get_bench_data(data, source="llama", efficient = "FALSE", calc_mean = TRUE)
source("load-run-joules.r")  # import the functions from load-run-joules.r
source("check-normality.r") # get the normality check info
## RQ3 ##
llama_default = get_bench_data(data, source="llama", efficient = "FALSE", calc_mean = TRUE)
warnings()
llama_data$data[1]
llama_data$data[[1]]
source("C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis/statistical-tests.r")
## RQ3 ##
llama_default = get_bench_data(data, source="llama", efficient = "FALSE", calc_mean = TRUE)
llama_anova = subset(llama_default, select = c(algo, temp, lang))
View(llama_default)
llama_anova = subset(llama_default, select = c(mean_data, algo, temp, lang))
View(llama_anova)
kruskal.test(mean_data ~ algo * temp * lang, data = llama_anova)
install.packages("rcompanion")
library(rcompanion)
scheirerRayHare(mean_data ~ algo * temp * lang, data = llama_anova)
scheirerRayHare(mean_data ~ algo * temp, data = llama_anova)
out = scheirerRayHare(mean_data ~ algo * temp, data = llama_anova)
scheirerRayHare(mean_data ~ algo * temp, data = llama_anova)
## RQ3 ##
llama_rq3_ts = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "two sum", calc_mean = TRUE)
llama_rq3_cn = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "closest numbers", calc_mean = TRUE)
llama_rq3_sr = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "string replacement", calc_mean = TRUE)
View(llama_rq3_cn)
scheirerRayHare(mean_data ~ temp * lang, data = llama_anova)
scheirerRayHare(mean_data ~ temp * lang, data = llama_anova)$lang$p.value
scheirerRayHare(mean_data ~ temp * lang, data = llama_anova)$lang
scheirerRayHare(mean_data ~ temp * lang, data = llama_anova)$p.value
scheirerRayHare(mean_data ~ temp * lang, data = llama_anova)
scheirerRayHare(mean_data ~ temp : lang, data = llama_anova)
scheirerRayHare(mean_data ~ temp + lang, data = llama_anova)
scheirerRayHare(mean_data ~ temp * lang, data = llama_anova)
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_ts)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_ts)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_cn)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_sr)   # Non-parametric alternative to 2-way anova
View(llama_rq3_cn)
View(llama_rq3_sr)
View(llama_rq3_ts)
View(llama_rq3_sr)
View(llama_rq3_cn)
View(llama_rq3_sr)
## RQ3 ##
llama_rq3_ts = get_bench_data(data, source="llama", algorithm = "two sum", calc_mean = TRUE)
llama_rq3_cn = get_bench_data(data, source="llama", algorithm = "closest numbers", calc_mean = TRUE)
llama_rq3_sr = get_bench_data(data, source="llama", algorithm = "string replacement", calc_mean = TRUE)
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_ts)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_cn)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_sr)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * eff, data = llama_rq3_ts)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * eff, data = llama_rq3_cn)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * eff, data = llama_rq3_sr)   # Non-parametric alternative to 2-way anova
llama_rq3_ts = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "two sum", calc_mean = TRUE)
llama_rq3_cn = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "closest numbers", calc_mean = TRUE)
llama_rq3_sr = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "string replacement", calc_mean = TRUE)
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_ts)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_cn)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_sr)   # Non-parametric alternative to 2-way anova
llama_rq3_ts = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "two sum", calc_mean = TRUE)
llama_rq3_cn = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "closest numbers", calc_mean = TRUE)
llama_rq3_sr = get_bench_data(data, source="llama", efficient = "FALSE", algorithm = "string replacement", calc_mean = TRUE)
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_ts)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_cn)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_sr)   # Non-parametric alternative to 2-way anova
source("C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis/statistical-tests.r")
install.packages("rcompanion")
source("C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis/statistical-tests.r")
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_ts)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_cn)   # Non-parametric alternative to 2-way anova
scheirerRayHare(mean_data ~ temp * lang, data = llama_rq3_sr)   # Non-parametric alternative to 2-way anova
source("C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis/statistical-tests.r")
source("C:/Users/cursa/Documents/University/MSc CS/Green Lab/Code Llama/GreenLab-Team-NoProbllama/R Data Analysis/statistical-tests.r")
View(data)
